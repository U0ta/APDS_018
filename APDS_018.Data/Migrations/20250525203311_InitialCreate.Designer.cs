// <auto-generated />
using System;
using APDS_018.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APDS_018.Data.Migrations
{
    [DbContext(typeof(APDSContextDb))]
    [Migration("20250525203311_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("APDS_018.Data.Models.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("NumAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NumQuestion")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("APDS_018.Data.Models.ParamResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaxValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MinValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Parametr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("ParamResults");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Protocol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("NumAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NumQuestion")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestingId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeAnswer")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NumAnswer");

                    b.HasIndex("NumQuestion");

                    b.HasIndex("TestingId");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("NumQuestion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Respondent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Born")
                        .HasColumnType("TEXT");

                    b.Property<string>("Midlename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameResp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Respondents");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Result", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParamResultId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueResult")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParamResultId");

                    b.HasIndex("TestingId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Help")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameTest")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Psycologist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RunFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Testing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("RespondentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TestingDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TestingTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RespondentId");

                    b.HasIndex("TestId");

                    b.ToTable("Testings");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Answer", b =>
                {
                    b.HasOne("APDS_018.Data.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.HasOne("APDS_018.Data.Models.Test", "Test")
                        .WithMany("Answers")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("APDS_018.Data.Models.ParamResult", b =>
                {
                    b.HasOne("APDS_018.Data.Models.Test", "Test")
                        .WithMany("ParamResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Protocol", b =>
                {
                    b.HasOne("APDS_018.Data.Models.Answer", "Answer")
                        .WithMany("Protocols")
                        .HasForeignKey("NumAnswer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APDS_018.Data.Models.Question", "Question")
                        .WithMany("Protocols")
                        .HasForeignKey("NumQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APDS_018.Data.Models.Testing", "Testing")
                        .WithMany("Protocols")
                        .HasForeignKey("TestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Testing");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Question", b =>
                {
                    b.HasOne("APDS_018.Data.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Result", b =>
                {
                    b.HasOne("APDS_018.Data.Models.ParamResult", "ParamResult")
                        .WithMany("Results")
                        .HasForeignKey("ParamResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APDS_018.Data.Models.Testing", "Testing")
                        .WithMany("Results")
                        .HasForeignKey("TestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParamResult");

                    b.Navigation("Testing");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Testing", b =>
                {
                    b.HasOne("APDS_018.Data.Models.Respondent", "Respondent")
                        .WithMany("Testings")
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APDS_018.Data.Models.Test", "Test")
                        .WithMany("Testings")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Respondent");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Answer", b =>
                {
                    b.Navigation("Protocols");
                });

            modelBuilder.Entity("APDS_018.Data.Models.ParamResult", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Protocols");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Respondent", b =>
                {
                    b.Navigation("Testings");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Test", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ParamResults");

                    b.Navigation("Questions");

                    b.Navigation("Testings");
                });

            modelBuilder.Entity("APDS_018.Data.Models.Testing", b =>
                {
                    b.Navigation("Protocols");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
